{"version":3,"sources":["App.js","components/Button.js","serviceWorker.js","index.js"],"names":["App","props","reset","setState","current","previous","nextIsReset","addToCurrent","symbol","indexOf","state","push","calulate","length","eval","String","buttons","cols","action","this","className","type","value","map","btn","i","key","Component","Button","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.998175a8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"./components/Button\";\nimport \"./css/Button.css\";\n// import \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      current: \"0\",\n      previous: [],\n      nextIsReset: false,\n    };\n  }\n\n  reset = () => {\n    this.setState({ current: 0, previous: [], nextIsReset: false });\n  };\n\n  addToCurrent = (symbol) => {\n    if ([\"/\", \"-\", \"+\", \"*\"].indexOf(symbol) > -1) {\n      let { previous } = this.state;\n      previous.push(this.state.current + symbol);\n      this.setState({ previous, nextIsReset: true });\n    } else {\n      if (\n        (this.state.current === \"0\" && symbol !== \".\") ||\n        this.state.nextIsReset\n      ) {\n        this.setState({ current: symbol, nextIsReset: false });\n      } else {\n        this.setState({ current: this.state.current + symbol });\n      }\n    }\n  };\n\n  calulate = (symbol) => {\n    let { current, previous, nextIsReset } = this.state;\n    if (previous.length > 0) {\n      current = eval(String(previous[previous.length - 1] + current));\n      this.setState({ current, previous: [], nextIsReset: true });\n    }\n  };\n\n  render() {\n    const buttons = [\n      {\n        symbol: \"C\",\n        cols: 3,\n        action: this.reset,\n      },\n      {\n        symbol: \"/\",\n        cols: 1,\n        action: this.addToCurrent,\n      },\n      {\n        symbol: \"7\",\n        cols: 1,\n        action: this.addToCurrent,\n      },\n      {\n        symbol: \"8\",\n        cols: 1,\n        action: this.addToCurrent,\n      },\n      {\n        symbol: \"9\",\n        cols: 1,\n        action: this.addToCurrent,\n      },\n      {\n        symbol: \"*\",\n        cols: 1,\n        action: this.addToCurrent,\n      },\n      {\n        symbol: \"4\",\n        cols: 1,\n        action: this.addToCurrent,\n      },\n      {\n        symbol: \"5\",\n        cols: 1,\n        action: this.addToCurrent,\n      },\n      {\n        symbol: \"6\",\n        cols: 1,\n        action: this.addToCurrent,\n      },\n      {\n        symbol: \"-\",\n        cols: 1,\n        action: this.addToCurrent,\n      },\n      {\n        symbol: \"1\",\n        cols: 1,\n        action: this.addToCurrent,\n      },\n      {\n        symbol: \"2\",\n        cols: 1,\n        action: this.addToCurrent,\n      },\n      {\n        symbol: \"3\",\n        cols: 1,\n        action: this.addToCurrent,\n      },\n      {\n        symbol: \"+\",\n        cols: 1,\n        action: this.addToCurrent,\n      },\n      {\n        symbol: \"0\",\n        cols: 2,\n        action: this.addToCurrent,\n      },\n      {\n        symbol: \".\",\n        cols: 1,\n        action: this.addToCurrent,\n      },\n      {\n        symbol: \"=\",\n        cols: 1,\n        action: this.calulate,\n      },\n    ];\n    return (\n      <div className=\"App\">\n        {this.state.previous.length > 0 ? (\n          <div className=\"floaty-last\">\n            {this.state.previous[this.state.previous.length - 1]}\n          </div>\n        ) : null}\n        <input type=\"text\" className=\"result\" value={this.state.current} />\n\n        {buttons.map((btn, i) => {\n          return (\n            <Button\n              key={i}\n              symbol={btn.symbol}\n              cols={btn.cols}\n              action={(symbol) => btn.action(symbol)}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\r\n\r\nclass Button extends Component {\r\n  render() {\r\n    return (\r\n      <div className={`column-${this.props.cols}`}>\r\n        <button\r\n          className=\"calc-button\"\r\n          onClick={(props) => {\r\n            this.props.action(this.props.symbol);\r\n          }}\r\n        >\r\n          {this.props.symbol}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Button;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}